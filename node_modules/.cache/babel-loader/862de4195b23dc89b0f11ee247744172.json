{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport * as IconExports from '../../icons';\n\nvar IconNameMapper = IconExports.IconNameMapper,\n    Icons = _objectWithoutProperties(IconExports, [\"IconNameMapper\"]);\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\n\nexport var Icon = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Icon, _PureComponent);\n\n  function Icon() {\n    _classCallCheck(this, Icon);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));\n  }\n\n  _createClass(Icon, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          iconProps = _objectWithoutProperties(_this$props, [\"icon\"]);\n\n      if (!icon) {\n        return null;\n      }\n\n      if (typeof icon !== 'string') {\n        return icon;\n      }\n\n      var iconName = IconNameMapper[icon];\n\n      if (!iconName) {\n        return null;\n      }\n\n      var Component = Icons[iconName];\n\n      if (!Component) {\n        return null;\n      }\n\n      return React.createElement(Component, iconProps);\n    }\n  }]);\n\n  return Icon;\n}(PureComponent);\nIcon.displayName = \"Icon\";\n\n_defineProperty(Icon, \"SIZE_STANDARD\", 16);\n\n_defineProperty(Icon, \"SIZE_LARGE\", 20);\n\n_defineProperty(Icon, \"propTypes\", {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number.isRequired,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n\n  /**\n   * CSS style properties.\n   */\n  style: PropTypes.object\n});","map":{"version":3,"sources":["../../../src/icon/src/Icon.js"],"names":["IconNameMapper","Icons","IconExports","Icon","color","PropTypes","icon","size","title","style","object","iconProps","iconName","Component"],"mappings":";;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,WAAA,MAAA,aAAA;;IAEQA,c,GAA6BE,W,CAA7BF,c;IAAmBC,K,4BAAUC,W;AAErC;;;;;;;AAMA,OAAA,IAAaC,IAAb,GAAA,aAAA,UAAA,cAAA,EAAA;AAAA,EAAA,SAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AAAA,WAAA,IAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA;;AAAA,EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAAA,SAAA,MAAA,GA6CW;AAAA,UAAA,WAAA,GACwB,KADxB,KAAA;AAAA,UACCG,IADD,GAAA,WAAA,CAAA,IAAA;AAAA,UACUK,SADV,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,MAAA,CAAA,CAAA;;AAGP,UAAI,CAAJ,IAAA,EAAW;AACT,eAAA,IAAA;AACD;;AAED,UAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,eAAA,IAAA;AACD;;AAED,UAAMC,QAAQ,GAAGZ,cAAc,CAA/B,IAA+B,CAA/B;;AACA,UAAI,CAAJ,QAAA,EAAe;AACb,eAAA,IAAA;AACD;;AAED,UAAMa,SAAS,GAAGZ,KAAK,CAAvB,QAAuB,CAAvB;;AACA,UAAI,CAAJ,SAAA,EAAgB;AACd,eAAA,IAAA;AACD;;AAED,aAAO,KAAA,CAAA,aAAA,CAAA,SAAA,EAAP,SAAO,CAAP;AACD;AAnEH,GAAA,CAAA,CAAA;;AAAA,SAAA,IAAA;AAAA,CAAA,CAAA,aAAA,CAAA;AAAaE,I,YAAAA,G,MAAAA;;gBAAAA,I,mBACY,E;;gBADZA,I,gBAES,E;;gBAFTA,I,eAIQ;AACjB;;;AAGAC,EAAAA,KAAK,EAAEC,SAAS,CAJC,MAAA;;AAMjB;;;;;;;;;;;;AAYAC,EAAAA,IAAI,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAA9CA,MAAoB,CAApBA,EAlBW,UAAA;;AAoBjB;;;;;AAKAE,EAAAA,IAAI,EAAEF,SAAS,CAATA,MAAAA,CAzBW,UAAA;;AA2BjB;;;;;;AAMAG,EAAAA,KAAK,EAAEH,SAAS,CAjCC,MAAA;;AAmCjB;;;AAGAI,EAAAA,KAAK,EAAEJ,SAAS,CAACK;AAtCA,C","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport * as IconExports from '../../icons'\n\nconst { IconNameMapper, ...Icons } = IconExports\n\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\nexport class Icon extends PureComponent {\n  static SIZE_STANDARD = 16\n  static SIZE_LARGE = 20\n\n  static propTypes = {\n    /**\n     * Color of icon. Equivalent to setting CSS `fill` property.\n     */\n    color: PropTypes.string,\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render.\n     * This prop is required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names),\n     *   that icon will be rendered as an `<svg>` with `<path>` tags.\n     * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n     *   This type is supported to simplify usage of this component in other Blueprint components.\n     *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n     */\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n\n    /**\n     * Size of the icon, in pixels.\n     * Blueprint contains 16px and 20px SVG icon images,\n     * and chooses the appropriate resolution based on this prop.\n     */\n    size: PropTypes.number.isRequired,\n\n    /**\n     * Description string.\n     * Browsers usually render this as a tooltip on hover, whereas screen\n     * readers will use it for aural feedback.\n     * By default, this is set to the icon's name for accessibility.\n     */\n    title: PropTypes.string,\n\n    /**\n     * CSS style properties.\n     */\n    style: PropTypes.object\n  }\n\n  render() {\n    const { icon, ...iconProps } = this.props\n\n    if (!icon) {\n      return null\n    }\n\n    if (typeof icon !== 'string') {\n      return icon\n    }\n\n    const iconName = IconNameMapper[icon]\n    if (!iconName) {\n      return null\n    }\n\n    const Component = Icons[iconName]\n    if (!Component) {\n      return null\n    }\n\n    return <Component {...iconProps} />\n  }\n}\n"]},"metadata":{},"sourceType":"module"}