{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\NB24708\\\\Desktop\\\\ezown\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\NB24708\\\\Desktop\\\\ezown\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\NB24708\\\\Desktop\\\\ezown\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport default function useApi(apiBase) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState(undefined),\n        _useState6 = _slicedToArray(_useState5, 2),\n        data = _useState6[0],\n        setData = _useState6[1]; // Request init is the same as the one for\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n\n\n  return {\n    loading,\n    error,\n    fetch: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apiRoute, requestInit) {\n        var result, fetchData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return fetch(\"\".concat(apiBase, \"/\").concat(apiRoute), requestInit).catch(ex => {\n                setLoading(false);\n                setError(ex);\n              });\n\n            case 3:\n              result = _context.sent;\n              setLoading(false);\n              _context.next = 7;\n              return result.json();\n\n            case 7:\n              fetchData = _context.sent;\n              setData(fetchData);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }())\n  };\n}","map":{"version":3,"sources":["D:/NB24708/Desktop/ezown/src/useApi.js"],"names":["useState","useApi","apiBase","loading","setLoading","error","setError","undefined","data","setData","fetch","apiRoute","requestInit","catch","ex","result","json","fetchData"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AAAA,oBACRF,QAAQ,CAAC,KAAD,CADA;AAAA;AAAA,QAC/BG,OAD+B;AAAA,QACtBC,UADsB;;AAAA,qBAEZJ,QAAQ,CAAC,IAAD,CAFI;AAAA;AAAA,QAE/BK,KAF+B;AAAA,QAExBC,QAFwB;;AAAA,qBAGdN,QAAQ,CAACO,SAAD,CAHM;AAAA;AAAA,QAG/BC,IAH+B;AAAA,QAGzBC,OAHyB,kBAKtC;AACA;;;AACA,SAAO;AACLN,IAAAA,OADK;AAELE,IAAAA,KAFK;AAGLK,IAAAA,KAAK;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0EAAE,iBAAOC,QAAP,EAAiBC,WAAjB;AAAA;AAAA;AAAA;AAAA;AACLR,cAAAA,UAAU,CAAC,IAAD,CAAV;AADK;AAAA,qBAGgBM,KAAK,WAAIR,OAAJ,cAAeS,QAAf,GAA2BC,WAA3B,CAAL,CAA6CC,KAA7C,CACnBC,EAAE,IAAI;AACJV,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,gBAAAA,QAAQ,CAACQ,EAAD,CAAR;AACD,eAJkB,CAHhB;;AAAA;AAGCC,cAAAA,MAHD;AAULX,cAAAA,UAAU,CAAC,KAAD,CAAV;AAVK;AAAA,qBAYmBW,MAAM,CAACC,IAAP,EAZnB;;AAAA;AAYCC,cAAAA,SAZD;AAaLR,cAAAA,OAAO,CAACQ,SAAD,CAAP;;AAbK;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA;AAHA,GAAP;AAmBD","sourcesContent":["import { useState } from \"react\";\n\nexport default function useApi(apiBase) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(undefined);\n\n  // Request init is the same as the one for\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n  return {\n    loading,\n    error,\n    fetch: async (apiRoute, requestInit) => {\n      setLoading(true);\n\n      const result = await fetch(`${apiBase}/${apiRoute}`, requestInit).catch(\n        ex => {\n          setLoading(false);\n          setError(ex);\n        }\n      );\n\n      setLoading(false);\n\n      const fetchData = await result.json();\n      setData(fetchData);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}