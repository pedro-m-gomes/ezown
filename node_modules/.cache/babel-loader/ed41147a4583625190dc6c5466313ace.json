{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\nimport { Spinner } from '../../spinner';\nimport { withTheme } from '../../theme';\n\nvar TextDropdownButton = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextDropdownButton, _PureComponent);\n\n  function TextDropdownButton() {\n    _classCallCheck(this, TextDropdownButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextDropdownButton).apply(this, arguments));\n  }\n\n  _createClass(TextDropdownButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          intent = _this$props.intent,\n          height = _this$props.height,\n          isActive = _this$props.isActive,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          appearance = _this$props.appearance,\n          isLoading = _this$props.isLoading,\n          paddingRight = _this$props.paddingRight,\n          paddingLeft = _this$props.paddingLeft,\n          paddingTop = _this$props.paddingTop,\n          paddingBottom = _this$props.paddingBottom,\n          icon = _this$props.icon,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"icon\"]);\n\n      var themedClassName = theme.getTextDropdownButtonClassName();\n      return React.createElement(Text, _extends({\n        is: \"button\",\n        className: themedClassName,\n        paddingX: 4,\n        marginX: -4,\n        paddingY: 2,\n        marginY: -2,\n        size: 300,\n        \"data-active\": isActive\n      }, TextDropdownButton.styles, props, {\n        disabled: disabled\n      }), isLoading && React.createElement(Spinner, {\n        marginLeft: -Math.round(height / 8),\n        marginRight: Math.round(height / 4),\n        size: Math.round(height / 2)\n      }), children, React.createElement(Icon, {\n        color: \"default\",\n        icon: icon,\n        size: 12,\n        marginLeft: 2\n      }));\n    }\n  }]);\n\n  return TextDropdownButton;\n}(PureComponent);\n\nTextDropdownButton.displayName = \"TextDropdownButton\";\n\n_defineProperty(TextDropdownButton, \"propTypes\", _objectSpread({}, dimensions.propTypes, {}, spacing.propTypes, {}, position.propTypes, {}, layout.propTypes, {\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TextDropdownButton, \"defaultProps\", {\n  isActive: false,\n  icon: 'caret-down'\n});\n\n_defineProperty(TextDropdownButton, \"styles\", {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n});\n\nexport default withTheme(TextDropdownButton);","map":{"version":3,"sources":["../../../src/buttons/src/TextDropdownButton.js"],"names":["TextDropdownButton","PureComponent","dimensions","propTypes","spacing","position","layout","isActive","PropTypes","bool","disabled","icon","isRequired","theme","className","string","fontFamily","fontWeight","display","alignItems","flexWrap","intent","height","children","appearance","isLoading","paddingRight","paddingLeft","paddingTop","paddingBottom","props","themedClassName","Math","withTheme"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { Text } from '../../typography'\nimport { Icon } from '../../icon'\nimport { Spinner } from '../../spinner'\nimport { withTheme } from '../../theme'\n\nclass TextDropdownButton extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the dimensions spec from the Box primitive.\n     */\n    ...dimensions.propTypes,\n\n    /**\n     * Composes the spacing spec from the Box primitive.\n     */\n    ...spacing.propTypes,\n\n    /**\n     * Composes the position spec from the Box primitive.\n     */\n    ...position.propTypes,\n\n    /**\n     * Composes the layout spec from the Box primitive.\n     */\n    ...layout.propTypes,\n\n    /**\n     * Forcefully set the active state of a button.\n     * Useful in conjuction with a Popover.\n     */\n    isActive: PropTypes.bool,\n\n    /**\n     * When true, the button is disabled.\n     * isLoading also sets the button to disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render.\n     * This prop is required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names),\n     *   that icon will be rendered as an `<svg>` with `<path>` tags.\n     * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n     *   This type is supported to simplify usage of this component in other Blueprint components.\n     *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n     */\n    icon: PropTypes.string.isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the button.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    isActive: false,\n    icon: 'caret-down'\n  }\n\n  static styles = {\n    position: 'relative',\n    fontFamily: 'ui',\n    fontWeight: 500,\n    display: 'inline-flex',\n    alignItems: 'center',\n    flexWrap: 'nowrap'\n  }\n\n  render() {\n    const {\n      theme,\n      className,\n\n      intent,\n      height,\n      isActive,\n      children,\n      disabled,\n      appearance,\n      isLoading,\n\n      // Paddings\n      paddingRight,\n      paddingLeft,\n      paddingTop,\n      paddingBottom,\n\n      // Icons\n      icon,\n\n      ...props\n    } = this.props\n\n    const themedClassName = theme.getTextDropdownButtonClassName()\n\n    return (\n      <Text\n        is=\"button\"\n        className={themedClassName}\n        paddingX={4}\n        marginX={-4}\n        paddingY={2}\n        marginY={-2}\n        size={300}\n        data-active={isActive}\n        {...TextDropdownButton.styles}\n        {...props}\n        disabled={disabled}\n      >\n        {isLoading && (\n          <Spinner\n            marginLeft={-Math.round(height / 8)}\n            marginRight={Math.round(height / 4)}\n            size={Math.round(height / 2)}\n          />\n        )}\n        {children}\n        <Icon color=\"default\" icon={icon} size={12} marginLeft={2} />\n      </Text>\n    )\n  }\n}\n\nexport default withTheme(TextDropdownButton)\n"]},"metadata":{},"sourceType":"module"}