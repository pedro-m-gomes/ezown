{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Icon } from '../../icon';\nimport { withTheme } from '../../theme';\nimport Button from './Button';\n\nvar IconButton = /*#__PURE__*/function (_PureComponent) {\n  _inherits(IconButton, _PureComponent);\n\n  function IconButton() {\n    _classCallCheck(this, IconButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IconButton).apply(this, arguments));\n  }\n\n  _createClass(IconButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          iconAim = _this$props.iconAim,\n          icon = _this$props.icon,\n          iconSize = _this$props.iconSize,\n          height = _this$props.height,\n          intent = _this$props.intent,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"iconAim\", \"icon\", \"iconSize\", \"height\", \"intent\"]);\n\n      var size = iconSize || theme.getIconSizeForIconButton(height);\n      return React.createElement(Button, _extends({\n        intent: intent,\n        height: height,\n        width: height,\n        paddingLeft: 0,\n        paddingRight: 0,\n        display: \"flex\",\n        justifyContent: \"center\"\n      }, props), React.createElement(Icon, {\n        icon: icon,\n        size: size,\n        color: intent === 'none' ? 'default' : 'currentColor'\n      }));\n    }\n  }]);\n\n  return IconButton;\n}(PureComponent);\n\nIconButton.displayName = \"IconButton\";\n\n_defineProperty(IconButton, \"propTypes\", _objectSpread({}, dimensions.propTypes, {}, spacing.propTypes, {}, position.propTypes, {}, layout.propTypes, {\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.string,\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(IconButton, \"defaultProps\", {\n  intent: 'none',\n  appearance: 'default',\n  height: 32\n});\n\nexport default withTheme(IconButton);","map":{"version":3,"sources":["../../../src/buttons/src/IconButton.js"],"names":["IconButton","PureComponent","dimensions","propTypes","spacing","position","layout","icon","PropTypes","string","iconSize","number","intent","isRequired","appearance","isActive","bool","disabled","theme","className","height","iconAim","props","size","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAAA,MAAA,QAAA,QAAA;AACA,SAAA,IAAA,QAAA,YAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,OAAA,MAAA,MAAA,UAAA;;IAEMA,U;;;;;;;;;;;6BAkFK;AAAA,UAAA,WAAA,GASH,KATG,KAAA;AAAA,UAELkB,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLG,OAHK,GAAA,WAAA,CAAA,OAAA;AAAA,UAILd,IAJK,GAAA,WAAA,CAAA,IAAA;AAAA,UAKLG,QALK,GAAA,WAAA,CAAA,QAAA;AAAA,UAMLU,MANK,GAAA,WAAA,CAAA,MAAA;AAAA,UAOLR,MAPK,GAAA,WAAA,CAAA,MAAA;AAAA,UAQFU,KARE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,CAAA,CAAA;;AAUP,UAAMC,IAAI,GAAGb,QAAQ,IAAIQ,KAAK,CAALA,wBAAAA,CAAzB,MAAyBA,CAAzB;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,QAAA,MAAM,EADR,MAAA;AAEE,QAAA,MAAM,EAFR,MAAA;AAGE,QAAA,KAAK,EAHP,MAAA;AAIE,QAAA,WAAW,EAJb,CAAA;AAKE,QAAA,YAAY,EALd,CAAA;AAME,QAAA,OAAO,EANT,MAAA;AAOE,QAAA,cAAc,EAAC;AAPjB,OAAA,EAAA,KAAA,CAAA,EAUE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,IAAI,EADN,IAAA;AAEE,QAAA,IAAI,EAFN,IAAA;AAGE,QAAA,KAAK,EAAEN,MAAM,KAANA,MAAAA,GAAAA,SAAAA,GAAgC;AAHzC,OAAA,CAVF,CADF;AAkBD;;;;EAhHsBX,a;;AAAnBD,U,YAAAA,G,YAAAA;;gBAAAA,U,iCAKCE,UAAU,CAACC,S,MAKXC,OAAO,CAACD,S,MAKRE,QAAQ,CAACF,S,MAKTG,MAAM,CAACH,S;AAEV;;;;;;;;;;;;AAYAI,EAAAA,IAAI,EAAEC,SAAS,CAACC,M;;AAEhB;;;AAGAC,EAAAA,QAAQ,EAAEF,SAAS,CAACG,M;;AAEpB;;;AAGAC,EAAAA,MAAM,EAAEJ,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAhBA,QAAgB,CAAhBA,EACLK,U;;AAEH;;;AAGAC,EAAAA,UAAU,EAAEN,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAAA,SAAA,EAAhBA,SAAgB,CAAhBA,EAAmDK,U;;AAE/D;;;;AAIAE,EAAAA,QAAQ,EAAEP,SAAS,CAACQ,I;;AAEpB;;;;AAIAC,EAAAA,QAAQ,EAAET,SAAS,CAACQ,I;;AAEpB;;;AAGAE,EAAAA,KAAK,EAAEV,SAAS,CAATA,MAAAA,CAAiBK,U;;AAExB;;;;AAIAM,EAAAA,SAAS,EAAEX,SAAS,CAACC;;;gBAzEnBT,U,kBA4EkB;AACpBY,EAAAA,MAAM,EADc,MAAA;AAEpBE,EAAAA,UAAU,EAFU,SAAA;AAGpBM,EAAAA,MAAM,EAAE;AAHY,C;;AAuCxB,eAAeI,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { Icon } from '../../icon'\nimport { withTheme } from '../../theme'\nimport Button from './Button'\n\nclass IconButton extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the dimensions spec from the Box primitive.\n     */\n    ...dimensions.propTypes,\n\n    /**\n     * Composes the spacing spec from the Box primitive.\n     */\n    ...spacing.propTypes,\n\n    /**\n     * Composes the position spec from the Box primitive.\n     */\n    ...position.propTypes,\n\n    /**\n     * Composes the layout spec from the Box primitive.\n     */\n    ...layout.propTypes,\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render.\n     * This prop is required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names),\n     *   that icon will be rendered as an `<svg>` with `<path>` tags.\n     * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n     *   This type is supported to simplify usage of this component in other Blueprint components.\n     *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n     */\n    icon: PropTypes.string,\n\n    /**\n     * Specifies an explicit icon size instead of the default value\n     */\n    iconSize: PropTypes.number,\n\n    /**\n     * The intent of the button.\n     */\n    intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger'])\n      .isRequired,\n\n    /**\n     * The appearance of the button.\n     */\n    appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n    /**\n     * Forcefully set the active state of a button.\n     * Useful in conjuction with a Popover.\n     */\n    isActive: PropTypes.bool,\n\n    /**\n     * When true, the button is disabled.\n     * isLoading also sets the button to disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the button.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    intent: 'none',\n    appearance: 'default',\n    height: 32\n  }\n\n  render() {\n    const {\n      theme,\n      iconAim,\n      icon,\n      iconSize,\n      height,\n      intent,\n      ...props\n    } = this.props\n    const size = iconSize || theme.getIconSizeForIconButton(height)\n\n    return (\n      <Button\n        intent={intent}\n        height={height}\n        width={height}\n        paddingLeft={0}\n        paddingRight={0}\n        display=\"flex\"\n        justifyContent=\"center\"\n        {...props}\n      >\n        <Icon\n          icon={icon}\n          size={size}\n          color={intent === 'none' ? 'default' : 'currentColor'}\n        />\n      </Button>\n    )\n  }\n}\n\nexport default withTheme(IconButton)\n"]},"metadata":{},"sourceType":"module"}