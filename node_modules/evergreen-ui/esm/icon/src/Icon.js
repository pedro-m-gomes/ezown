import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import * as IconExports from '../../icons';

var IconNameMapper = IconExports.IconNameMapper,
    Icons = _objectWithoutProperties(IconExports, ["IconNameMapper"]);
/**
 * This implementation is a remix of the Icon component in Blueprintjs:
 * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15
 * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE
 */


export var Icon =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Icon, _PureComponent);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          iconProps = _objectWithoutProperties(_this$props, ["icon"]);

      if (!icon) {
        return null;
      }

      if (typeof icon !== 'string') {
        return icon;
      }

      var iconName = IconNameMapper[icon];

      if (!iconName) {
        return null;
      }

      var Component = Icons[iconName];

      if (!Component) {
        return null;
      }

      return React.createElement(Component, iconProps);
    }
  }]);

  return Icon;
}(PureComponent);
Icon.displayName = "Icon";

_defineProperty(Icon, "SIZE_STANDARD", 16);

_defineProperty(Icon, "SIZE_LARGE", 20);

_defineProperty(Icon, "propTypes", {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: PropTypes.string,

  /**
   * Name of a Blueprint UI icon, or an icon element, to render.
   * This prop is required because it determines the content of the component, but it can
   * be explicitly set to falsy values to render nothing.
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given an `IconName` (a string literal union of all icon names),
   *   that icon will be rendered as an `<svg>` with `<path>` tags.
   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._
   *   This type is supported to simplify usage of this component in other Blueprint components.
   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.
   */
  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: PropTypes.number.isRequired,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: PropTypes.string,

  /**
   * CSS style properties.
   */
  style: PropTypes.object
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29uL3NyYy9JY29uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIkljb25FeHBvcnRzIiwiSWNvbk5hbWVNYXBwZXIiLCJJY29ucyIsIkljb24iLCJwcm9wcyIsImljb24iLCJpY29uUHJvcHMiLCJpY29uTmFtZSIsIkNvbXBvbmVudCIsImNvbG9yIiwic3RyaW5nIiwib25lT2ZUeXBlIiwibm9kZSIsImlzUmVxdWlyZWQiLCJzaXplIiwibnVtYmVyIiwidGl0bGUiLCJzdHlsZSIsIm9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU8sS0FBS0MsV0FBWixNQUE2QixhQUE3Qjs7SUFFUUMsYyxHQUE2QkQsVyxDQUE3QkMsYztJQUFtQkMsSyw0QkFBVUYsVztBQUVyQzs7Ozs7OztBQU1BLFdBQWFHLElBQWI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSw2QkE2Q1c7QUFBQSx3QkFDd0IsS0FBS0MsS0FEN0I7QUFBQSxVQUNDQyxJQURELGVBQ0NBLElBREQ7QUFBQSxVQUNVQyxTQURWOztBQUdQLFVBQUksQ0FBQ0QsSUFBTCxFQUFXO0FBQ1QsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLGVBQU9BLElBQVA7QUFDRDs7QUFFRCxVQUFNRSxRQUFRLEdBQUdOLGNBQWMsQ0FBQ0ksSUFBRCxDQUEvQjs7QUFDQSxVQUFJLENBQUNFLFFBQUwsRUFBZTtBQUNiLGVBQU8sSUFBUDtBQUNEOztBQUVELFVBQU1DLFNBQVMsR0FBR04sS0FBSyxDQUFDSyxRQUFELENBQXZCOztBQUNBLFVBQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNkLGVBQU8sSUFBUDtBQUNEOztBQUVELGFBQU8sb0JBQUMsU0FBRCxFQUFlRixTQUFmLENBQVA7QUFDRDtBQW5FSDs7QUFBQTtBQUFBLEVBQTBCUixhQUExQjtBQUFhSyxJOztnQkFBQUEsSSxtQkFDWSxFOztnQkFEWkEsSSxnQkFFUyxFOztnQkFGVEEsSSxlQUlRO0FBQ2pCOzs7QUFHQU0sRUFBQUEsS0FBSyxFQUFFVixTQUFTLENBQUNXLE1BSkE7O0FBTWpCOzs7Ozs7Ozs7Ozs7QUFZQUwsRUFBQUEsSUFBSSxFQUFFTixTQUFTLENBQUNZLFNBQVYsQ0FBb0IsQ0FBQ1osU0FBUyxDQUFDYSxJQUFYLEVBQWlCYixTQUFTLENBQUNXLE1BQTNCLENBQXBCLEVBQXdERyxVQWxCN0M7O0FBb0JqQjs7Ozs7QUFLQUMsRUFBQUEsSUFBSSxFQUFFZixTQUFTLENBQUNnQixNQUFWLENBQWlCRixVQXpCTjs7QUEyQmpCOzs7Ozs7QUFNQUcsRUFBQUEsS0FBSyxFQUFFakIsU0FBUyxDQUFDVyxNQWpDQTs7QUFtQ2pCOzs7QUFHQU8sRUFBQUEsS0FBSyxFQUFFbEIsU0FBUyxDQUFDbUI7QUF0Q0EsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgKiBhcyBJY29uRXhwb3J0cyBmcm9tICcuLi8uLi9pY29ucydcblxuY29uc3QgeyBJY29uTmFtZU1hcHBlciwgLi4uSWNvbnMgfSA9IEljb25FeHBvcnRzXG5cbi8qKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBhIHJlbWl4IG9mIHRoZSBJY29uIGNvbXBvbmVudCBpbiBCbHVlcHJpbnRqczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxhbnRpci9ibHVlcHJpbnQvYmxvYi84MTNlOTNmMi9wYWNrYWdlcy9jb3JlL3NyYy9jb21wb25lbnRzL2ljb24vaWNvbi50c3gjTDE1XG4gKiBSZWZlciB0byB0aGUgTElDRU5TRSBmb3IgQmx1ZXByaW50SlMgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3BhbGFudGlyL2JsdWVwcmludC9ibG9iL2RldmVsb3AvTElDRU5TRVxuICovXG5cbmV4cG9ydCBjbGFzcyBJY29uIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBTSVpFX1NUQU5EQVJEID0gMTZcbiAgc3RhdGljIFNJWkVfTEFSR0UgPSAyMFxuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgaWNvbi4gRXF1aXZhbGVudCB0byBzZXR0aW5nIENTUyBgZmlsbGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIGEgQmx1ZXByaW50IFVJIGljb24sIG9yIGFuIGljb24gZWxlbWVudCwgdG8gcmVuZGVyLlxuICAgICAqIFRoaXMgcHJvcCBpcyByZXF1aXJlZCBiZWNhdXNlIGl0IGRldGVybWluZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgYnV0IGl0IGNhblxuICAgICAqIGJlIGV4cGxpY2l0bHkgc2V0IHRvIGZhbHN5IHZhbHVlcyB0byByZW5kZXIgbm90aGluZy5cbiAgICAgKlxuICAgICAqIC0gSWYgYG51bGxgIG9yIGB1bmRlZmluZWRgIG9yIGBmYWxzZWAsIHRoaXMgY29tcG9uZW50IHdpbGwgcmVuZGVyIG5vdGhpbmcuXG4gICAgICogLSBJZiBnaXZlbiBhbiBgSWNvbk5hbWVgIChhIHN0cmluZyBsaXRlcmFsIHVuaW9uIG9mIGFsbCBpY29uIG5hbWVzKSxcbiAgICAgKiAgIHRoYXQgaWNvbiB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGA8c3ZnPmAgd2l0aCBgPHBhdGg+YCB0YWdzLlxuICAgICAqIC0gSWYgZ2l2ZW4gYSBgSlNYLkVsZW1lbnRgLCB0aGF0IGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZCBhbmQgX2FsbCBvdGhlciBwcm9wcyBvbiB0aGlzIGNvbXBvbmVudCBhcmUgaWdub3JlZC5fXG4gICAgICogICBUaGlzIHR5cGUgaXMgc3VwcG9ydGVkIHRvIHNpbXBsaWZ5IHVzYWdlIG9mIHRoaXMgY29tcG9uZW50IGluIG90aGVyIEJsdWVwcmludCBjb21wb25lbnRzLlxuICAgICAqICAgQXMgYSBjb25zdW1lciwgeW91IHNob3VsZCBuZXZlciB1c2UgYDxJY29uIGljb249ezxlbGVtZW50IC8+fWAgZGlyZWN0bHk7IHNpbXBseSByZW5kZXIgYDxlbGVtZW50IC8+YCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFNpemUgb2YgdGhlIGljb24sIGluIHBpeGVscy5cbiAgICAgKiBCbHVlcHJpbnQgY29udGFpbnMgMTZweCBhbmQgMjBweCBTVkcgaWNvbiBpbWFnZXMsXG4gICAgICogYW5kIGNob29zZXMgdGhlIGFwcHJvcHJpYXRlIHJlc29sdXRpb24gYmFzZWQgb24gdGhpcyBwcm9wLlxuICAgICAqL1xuICAgIHNpemU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uIHN0cmluZy5cbiAgICAgKiBCcm93c2VycyB1c3VhbGx5IHJlbmRlciB0aGlzIGFzIGEgdG9vbHRpcCBvbiBob3Zlciwgd2hlcmVhcyBzY3JlZW5cbiAgICAgKiByZWFkZXJzIHdpbGwgdXNlIGl0IGZvciBhdXJhbCBmZWVkYmFjay5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIGlzIHNldCB0byB0aGUgaWNvbidzIG5hbWUgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAgICovXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBDU1Mgc3R5bGUgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaWNvbiwgLi4uaWNvblByb3BzIH0gPSB0aGlzLnByb3BzXG5cbiAgICBpZiAoIWljb24pIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpY29uICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGljb25cbiAgICB9XG5cbiAgICBjb25zdCBpY29uTmFtZSA9IEljb25OYW1lTWFwcGVyW2ljb25dXG4gICAgaWYgKCFpY29uTmFtZSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBDb21wb25lbnQgPSBJY29uc1tpY29uTmFtZV1cbiAgICBpZiAoIUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gPENvbXBvbmVudCB7Li4uaWNvblByb3BzfSAvPlxuICB9XG59XG4iXX0=