"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var IconExports = _interopRequireWildcard(require("../../icons"));

var IconNameMapper = IconExports.IconNameMapper,
    Icons = (0, _objectWithoutProperties2["default"])(IconExports, ["IconNameMapper"]);
/**
 * This implementation is a remix of the Icon component in Blueprintjs:
 * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15
 * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE
 */

var Icon =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(Icon, _PureComponent);

  function Icon() {
    (0, _classCallCheck2["default"])(this, Icon);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Icon).apply(this, arguments));
  }

  (0, _createClass2["default"])(Icon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          iconProps = (0, _objectWithoutProperties2["default"])(_this$props, ["icon"]);

      if (!icon) {
        return null;
      }

      if (typeof icon !== 'string') {
        return icon;
      }

      var iconName = IconNameMapper[icon];

      if (!iconName) {
        return null;
      }

      var Component = Icons[iconName];

      if (!Component) {
        return null;
      }

      return _react["default"].createElement(Component, iconProps);
    }
  }]);
  return Icon;
}(_react.PureComponent);

exports.Icon = Icon;
Icon.displayName = "Icon";
(0, _defineProperty2["default"])(Icon, "SIZE_STANDARD", 16);
(0, _defineProperty2["default"])(Icon, "SIZE_LARGE", 20);
(0, _defineProperty2["default"])(Icon, "propTypes", {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: _propTypes["default"].string,

  /**
   * Name of a Blueprint UI icon, or an icon element, to render.
   * This prop is required because it determines the content of the component, but it can
   * be explicitly set to falsy values to render nothing.
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given an `IconName` (a string literal union of all icon names),
   *   that icon will be rendered as an `<svg>` with `<path>` tags.
   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._
   *   This type is supported to simplify usage of this component in other Blueprint components.
   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.
   */
  icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string]).isRequired,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: _propTypes["default"].number.isRequired,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: _propTypes["default"].string,

  /**
   * CSS style properties.
   */
  style: _propTypes["default"].object
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29uL3NyYy9JY29uLmpzIl0sIm5hbWVzIjpbIkljb25OYW1lTWFwcGVyIiwiSWNvbkV4cG9ydHMiLCJJY29ucyIsIkljb24iLCJwcm9wcyIsImljb24iLCJpY29uUHJvcHMiLCJpY29uTmFtZSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjb2xvciIsIlByb3BUeXBlcyIsInN0cmluZyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJpc1JlcXVpcmVkIiwic2l6ZSIsIm51bWJlciIsInRpdGxlIiwic3R5bGUiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7SUFFUUEsYyxHQUE2QkMsVyxDQUE3QkQsYztJQUFtQkUsSyw2Q0FBVUQsVztBQUVyQzs7Ozs7O0lBTWFFLEk7Ozs7Ozs7Ozs7Ozs2QkE2Q0Y7QUFBQSx3QkFDd0IsS0FBS0MsS0FEN0I7QUFBQSxVQUNDQyxJQURELGVBQ0NBLElBREQ7QUFBQSxVQUNVQyxTQURWOztBQUdQLFVBQUksQ0FBQ0QsSUFBTCxFQUFXO0FBQ1QsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLGVBQU9BLElBQVA7QUFDRDs7QUFFRCxVQUFNRSxRQUFRLEdBQUdQLGNBQWMsQ0FBQ0ssSUFBRCxDQUEvQjs7QUFDQSxVQUFJLENBQUNFLFFBQUwsRUFBZTtBQUNiLGVBQU8sSUFBUDtBQUNEOztBQUVELFVBQU1DLFNBQVMsR0FBR04sS0FBSyxDQUFDSyxRQUFELENBQXZCOztBQUNBLFVBQUksQ0FBQ0MsU0FBTCxFQUFnQjtBQUNkLGVBQU8sSUFBUDtBQUNEOztBQUVELGFBQU8sZ0NBQUMsU0FBRCxFQUFlRixTQUFmLENBQVA7QUFDRDs7O0VBbkV1Qkcsb0I7OztBQUFiTixJO2lDQUFBQSxJLG1CQUNZLEU7aUNBRFpBLEksZ0JBRVMsRTtpQ0FGVEEsSSxlQUlRO0FBQ2pCOzs7QUFHQU8sRUFBQUEsS0FBSyxFQUFFQyxzQkFBVUMsTUFKQTs7QUFNakI7Ozs7Ozs7Ozs7OztBQVlBUCxFQUFBQSxJQUFJLEVBQUVNLHNCQUFVRSxTQUFWLENBQW9CLENBQUNGLHNCQUFVRyxJQUFYLEVBQWlCSCxzQkFBVUMsTUFBM0IsQ0FBcEIsRUFBd0RHLFVBbEI3Qzs7QUFvQmpCOzs7OztBQUtBQyxFQUFBQSxJQUFJLEVBQUVMLHNCQUFVTSxNQUFWLENBQWlCRixVQXpCTjs7QUEyQmpCOzs7Ozs7QUFNQUcsRUFBQUEsS0FBSyxFQUFFUCxzQkFBVUMsTUFqQ0E7O0FBbUNqQjs7O0FBR0FPLEVBQUFBLEtBQUssRUFBRVIsc0JBQVVTO0FBdENBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0ICogYXMgSWNvbkV4cG9ydHMgZnJvbSAnLi4vLi4vaWNvbnMnXG5cbmNvbnN0IHsgSWNvbk5hbWVNYXBwZXIsIC4uLkljb25zIH0gPSBJY29uRXhwb3J0c1xuXG4vKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYSByZW1peCBvZiB0aGUgSWNvbiBjb21wb25lbnQgaW4gQmx1ZXByaW50anM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvYmx1ZXByaW50L2Jsb2IvODEzZTkzZjIvcGFja2FnZXMvY29yZS9zcmMvY29tcG9uZW50cy9pY29uL2ljb24udHN4I0wxNVxuICogUmVmZXIgdG8gdGhlIExJQ0VOU0UgZm9yIEJsdWVwcmludEpTIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxhbnRpci9ibHVlcHJpbnQvYmxvYi9kZXZlbG9wL0xJQ0VOU0VcbiAqL1xuXG5leHBvcnQgY2xhc3MgSWNvbiBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgU0laRV9TVEFOREFSRCA9IDE2XG4gIHN0YXRpYyBTSVpFX0xBUkdFID0gMjBcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIGljb24uIEVxdWl2YWxlbnQgdG8gc2V0dGluZyBDU1MgYGZpbGxgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogTmFtZSBvZiBhIEJsdWVwcmludCBVSSBpY29uLCBvciBhbiBpY29uIGVsZW1lbnQsIHRvIHJlbmRlci5cbiAgICAgKiBUaGlzIHByb3AgaXMgcmVxdWlyZWQgYmVjYXVzZSBpdCBkZXRlcm1pbmVzIHRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIGJ1dCBpdCBjYW5cbiAgICAgKiBiZSBleHBsaWNpdGx5IHNldCB0byBmYWxzeSB2YWx1ZXMgdG8gcmVuZGVyIG5vdGhpbmcuXG4gICAgICpcbiAgICAgKiAtIElmIGBudWxsYCBvciBgdW5kZWZpbmVkYCBvciBgZmFsc2VgLCB0aGlzIGNvbXBvbmVudCB3aWxsIHJlbmRlciBub3RoaW5nLlxuICAgICAqIC0gSWYgZ2l2ZW4gYW4gYEljb25OYW1lYCAoYSBzdHJpbmcgbGl0ZXJhbCB1bmlvbiBvZiBhbGwgaWNvbiBuYW1lcyksXG4gICAgICogICB0aGF0IGljb24gd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBgPHN2Zz5gIHdpdGggYDxwYXRoPmAgdGFncy5cbiAgICAgKiAtIElmIGdpdmVuIGEgYEpTWC5FbGVtZW50YCwgdGhhdCBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQgYW5kIF9hbGwgb3RoZXIgcHJvcHMgb24gdGhpcyBjb21wb25lbnQgYXJlIGlnbm9yZWQuX1xuICAgICAqICAgVGhpcyB0eXBlIGlzIHN1cHBvcnRlZCB0byBzaW1wbGlmeSB1c2FnZSBvZiB0aGlzIGNvbXBvbmVudCBpbiBvdGhlciBCbHVlcHJpbnQgY29tcG9uZW50cy5cbiAgICAgKiAgIEFzIGEgY29uc3VtZXIsIHlvdSBzaG91bGQgbmV2ZXIgdXNlIGA8SWNvbiBpY29uPXs8ZWxlbWVudCAvPn1gIGRpcmVjdGx5OyBzaW1wbHkgcmVuZGVyIGA8ZWxlbWVudCAvPmAgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSBpY29uLCBpbiBwaXhlbHMuXG4gICAgICogQmx1ZXByaW50IGNvbnRhaW5zIDE2cHggYW5kIDIwcHggU1ZHIGljb24gaW1hZ2VzLFxuICAgICAqIGFuZCBjaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSByZXNvbHV0aW9uIGJhc2VkIG9uIHRoaXMgcHJvcC5cbiAgICAgKi9cbiAgICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvbiBzdHJpbmcuXG4gICAgICogQnJvd3NlcnMgdXN1YWxseSByZW5kZXIgdGhpcyBhcyBhIHRvb2x0aXAgb24gaG92ZXIsIHdoZXJlYXMgc2NyZWVuXG4gICAgICogcmVhZGVycyB3aWxsIHVzZSBpdCBmb3IgYXVyYWwgZmVlZGJhY2suXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpcyBzZXQgdG8gdGhlIGljb24ncyBuYW1lIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgICAqL1xuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogQ1NTIHN0eWxlIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGljb24sIC4uLmljb25Qcm9wcyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgaWYgKCFpY29uKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaWNvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBpY29uXG4gICAgfVxuXG4gICAgY29uc3QgaWNvbk5hbWUgPSBJY29uTmFtZU1hcHBlcltpY29uXVxuICAgIGlmICghaWNvbk5hbWUpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgQ29tcG9uZW50ID0gSWNvbnNbaWNvbk5hbWVdXG4gICAgaWYgKCFDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIDxDb21wb25lbnQgey4uLmljb25Qcm9wc30gLz5cbiAgfVxufVxuIl19